
import { Service, ServiceType } from "@/types";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "sonner";

export const validateSession = async () => {
  const { data: sessionData } = await supabase.auth.getSession();
  if (!sessionData?.session?.user?.id) {
    console.error("ServiceUtils: UID ausente na valida√ß√£o de sess√£o");
    throw new Error("Usu√°rio n√£o autenticado");
  }
  return sessionData.session.user.id;
};

export const createProcessedService = (service: Service): Service => ({
  id: service.id,
  name: service.name,
  selected: false,
  type: service.id as ServiceType, // Corrigindo a convers√£o explicita para ServiceType
  photos: [],
  quantity: 1
});

export const handleServiceError = (error: unknown): Service[] => {
  console.error("ServiceUtils: Erro ao processar servi√ßos:", error);
  toast.error("Erro ao carregar servi√ßos", {
    description: "Tente novamente em alguns instantes."
  });
  return [];
};

export const logServiceLoadTime = (startTime: number) => {
  const elapsedTime = Date.now() - startTime;
  console.log(`ServiceUtils: üî• Carregamento de servi√ßos finalizado em ${elapsedTime}ms`);
};

// Nova fun√ß√£o para adicionar diagn√≥stico de conex√£o
export const checkSupabaseConnection = async (): Promise<boolean> => {
  try {
    const startTime = Date.now();
    console.log("ServiceUtils: Verificando conex√£o com Supabase...");
    
    // Tenta uma query simples para testar a conex√£o
    const { data, error } = await supabase
      .from('service_types')
      .select('count(*)', { count: 'exact', head: true });
      
    const elapsedTime = Date.now() - startTime;
    
    if (error) {
      console.error(`ServiceUtils: Erro de conex√£o com Supabase ap√≥s ${elapsedTime}ms:`, error);
      return false;
    }
    
    console.log(`ServiceUtils: Conex√£o com Supabase OK em ${elapsedTime}ms`);
    return true;
  } catch (error) {
    console.error("ServiceUtils: Erro cr√≠tico ao verificar conex√£o:", error);
    return false;
  }
};

// Nova fun√ß√£o para otimizar o carregamento de servi√ßos
export const loadServicesOptimized = async (): Promise<Service[]> => {
  try {
    console.log("ServiceUtils: Iniciando carregamento otimizado de servi√ßos");
    const startTime = Date.now();
    
    // Primeiro verificamos a conex√£o
    const isConnected = await checkSupabaseConnection();
    if (!isConnected) {
      throw new Error("Falha na conex√£o com o servidor Supabase");
    }
    
    // Tentamos carregar com timeout reduzido
    const { data, error } = await supabase
      .from('service_types')
      .select('*')
      .order('name')
      .timeout(5000); // Timeout expl√≠cito de 5 segundos
      
    if (error) {
      console.error("ServiceUtils: Erro ao carregar servi√ßos:", error);
      throw error;
    }
    
    if (!Array.isArray(data) || data.length === 0) {
      console.warn("ServiceUtils: Nenhum servi√ßo encontrado");
      return [];
    }
    
    const processedServices = data.map(createProcessedService);
    logServiceLoadTime(startTime);
    
    return processedServices;
  } catch (error) {
    return handleServiceError(error);
  }
};
