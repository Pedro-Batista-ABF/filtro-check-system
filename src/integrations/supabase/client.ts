
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yjcyebiahnwfwrcgqlcm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqY3llYmlhaG53ZndyY2dxbGNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0OTg0MzUsImV4cCI6MjA2MDA3NDQzNX0.MsHyZ9F4nVv0v9q8D7iQK4qgVmxUMdCAxKQun3GuSG4";

// Configurações personalizadas para o cliente Supabase
const options = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storageKey: 'supabase.auth.token',
  },
  global: {
    headers: {
      'Authorization': `Bearer ${SUPABASE_PUBLISHABLE_KEY}`,
      'apikey': SUPABASE_PUBLISHABLE_KEY,
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, options);

// Função para verificar se o Supabase está acessível
export const checkSupabaseStatus = async (): Promise<boolean> => {
  try {
    const startTime = Date.now();
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000);
    
    // Primeiro, obter a sessão atual para garantir autenticação
    const { data: sessionData } = await supabase.auth.getSession();
    const authHeader = sessionData?.session ? 
      `Bearer ${sessionData.session.access_token}` : 
      `Bearer ${SUPABASE_PUBLISHABLE_KEY}`;
    
    // Tentativa de conexão com headers adequados
    const response = await fetch(`${SUPABASE_URL}/rest/v1/`, {
      method: 'HEAD',
      headers: {
        'Authorization': authHeader,
        'apikey': SUPABASE_PUBLISHABLE_KEY,
        'Content-Type': 'application/json',
      },
      signal: controller.signal,
    });
    
    clearTimeout(timeoutId);
    
    const elapsedTime = Date.now() - startTime;
    console.log(`Verificação de status do Supabase completada em ${elapsedTime}ms (Status: ${response.status})`);
    
    if (response.status === 401) {
      console.warn("Erro de autenticação (401) detectado. Tentando atualizar a sessão...");
      await refreshAuthSession();
      return false;
    }
    
    return response.ok;
  } catch (error) {
    console.error("Erro ao verificar status do Supabase:", error);
    return false;
  }
};

// Função para forçar atualização do token
export const refreshAuthSession = async (): Promise<boolean> => {
  try {
    console.log("Tentando atualizar a sessão do usuário...");
    const { data, error } = await supabase.auth.refreshSession();
    
    if (error || !data.session) {
      console.error("Falha ao atualizar sessão:", error);
      return false;
    }
    
    console.log("Sessão atualizada com sucesso:", data.session.user?.id);
    return true;
  } catch (error) {
    console.error("Erro crítico ao atualizar sessão:", error);
    return false;
  }
};

// Adiciona middleware para todas as chamadas supabase
export const withAuthRefresh = async <T>(
  operation: () => Promise<T>
): Promise<T> => {
  try {
    // Tenta a operação normalmente
    return await operation();
  } catch (error: any) {
    // Se for erro 401, tenta renovar o token e tenta a operação novamente
    if (error.status === 401 || error.code === 'PGRST301') {
      console.warn("Erro 401 detectado, tentando renovar sessão...");
      const refreshed = await refreshAuthSession();
      
      if (refreshed) {
        console.log("Sessão renovada, tentando operação novamente...");
        return await operation();
      }
    }
    
    // Se não for erro 401 ou não conseguir renovar, propaga o erro
    throw error;
  }
};

// Função para verificar e logar o status da autenticação
export const logAuthStatus = async (): Promise<string | null> => {
  try {
    const { data } = await supabase.auth.getSession();
    const userId = data.session?.user?.id;
    
    if (userId) {
      console.log(`✅ Usuário autenticado: ${userId.substring(0, 8)}...`);
      return userId;
    } else {
      console.warn("⚠️ Nenhum usuário autenticado!");
      return null;
    }
  } catch (error) {
    console.error("❌ Erro ao verificar autenticação:", error);
    return null;
  }
};
