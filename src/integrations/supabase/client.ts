
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://yjcyebiahnwfwrcgqlcm.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlqY3llYmlhaG53ZndyY2dxbGNtIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ0OTg0MzUsImV4cCI6MjA2MDA3NDQzNX0.MsHyZ9F4nVv0v9q8D7iQK4qgVmxUMdCAxKQun3GuSG4";

// Configurações personalizadas para o cliente Supabase
const options = {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
  },
  global: {
    // Tempo limite específico do cliente
    fetch: (...args: any[]) => {
      // @ts-ignore
      return fetch(...args);
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, options);

// Função para verificar se o Supabase está acessível
export const checkSupabaseStatus = async (): Promise<boolean> => {
  try {
    const startTime = Date.now();
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 8000);
    
    // Tenta uma query simples para testar a conexão
    const { data, error } = await supabase
      .from('service_types')
      .select('count(*)', { count: 'exact', head: true })
      .abortSignal(controller.signal);
    
    clearTimeout(timeoutId);
    
    const elapsedTime = Date.now() - startTime;
    console.log(`Verificação de status do Supabase completada em ${elapsedTime}ms`);
    
    return !error;
  } catch (error) {
    console.error("Erro ao verificar status do Supabase:", error);
    return false;
  }
};
